#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
This file is automatically generated by AION for AI0017_1 usecase.
File generation time: 2023-02-21 10:13:57
'''
#Standard Library modules
import json
import warnings

#Third Party modules
from pathlib import Path
import pandas as pd 

#local modules
import utility as utils 

warnings.filterwarnings("ignore")

IOFiles = {
    "log": "aion.log",
    "metaData": "modelMetaData.json"
}
        
def validateConfig():        
    config_file = Path(__file__).parent/'config.json'        
    if not Path(config_file).exists():        
        raise ValueError(f'Config file is missing: {config_file}')        
    config = utils.read_json(config_file)		
    return config		

def monitoring(config, targetPath, log):
    retrain = False
    last_run_id = 0
    retrain_threshold = config.get('retrainThreshold', 100)
    meta_data_file = targetPath / IOFiles['metaData']
    if meta_data_file.exists():
        meta_data = utils.read_json(meta_data_file)
        if not meta_data.get('register', None):
            log.info('Last time Pipeline not executed properly')
            retrain = True
        else:
            last_run_id = meta_data['register']['runId']
            df = utils.read_data(config['dataLocation'])
            df_len = len(df)
            if not meta_data['monitoring'].get('endIndex', None):
                meta_data['monitoring']['endIndex'] = int(meta_data['load_data']['Status']['Records'])
                meta_data['monitoring']['endIndexTemp'] = meta_data['monitoring']['endIndex']
            if meta_data['register'].get('registered', False):
                meta_data['monitoring']['endIndex'] = meta_data['monitoring']['endIndexTemp']
                meta_data['register']['registered'] = False #ack registery
            if (meta_data['monitoring']['endIndex'] + retrain_threshold) < df_len:
                meta_data['monitoring']['endIndexTemp'] = df_len
                retrain = True
    else:
        log.info('Pipeline running first time')
        meta_data = {}
        meta_data['monitoring'] = {}
        retrain = True
    if retrain:
        meta_data['monitoring']['runId'] = last_run_id + 1
    meta_data['monitoring']['retrain'] = retrain
    utils.write_json(meta_data, targetPath/IOFiles['metaData'])
    status = {'Status':'Success','retrain': retrain, 'runId':meta_data['monitoring']['runId']}        
    log.info(f'output: {status}')        
    return json.dumps(status)
        
if __name__ == '__main__':
    config = validateConfig()
    targetPath = Path('aion') / config['targetPath']
    targetPath.mkdir(parents=True, exist_ok=True)
    log_file = targetPath / IOFiles['log']
    log = utils.logger(log_file, mode='a', logger_name=Path(__file__).parent.stem)
    try:
        print(monitoring(config, targetPath, log))
    except Exception as e:
        status = {'Status': 'Failure', 'Message': str(e)}
        print(json.dumps(status))
        